clear all, close all, clc;load("..//音乐合成所需资源//Guitar.MAT");len = length(realwave);realwave_10 = resample(realwave, 10, 1);period = zeros(len, 1);for i = 1: 1: len    for j = 0: 1: 9        period(i) = period(i) + realwave_10(j * len + i);    end    period(i) = period(i) / 10;endperiod_10 = repmat(period, 10, 1);w2p = resample(period_10, 1, 10);fs = 8000;w2p_100 = repmat(w2p, 100, 1);y3 = fft(w2p_100);L3 = length(y3);rep = 10 * 100;period_amp = zeros(round(L3 / rep) + 1, 1);period_freidx = zeros(round(L3 / rep) + 1, 1);interval = rep;abs_y3 = abs(y3);period_amp(1) = abs(y3(1));period_freidx(1) = 0;for i = 1: 1: length(period_amp) - 1    [period_amp(i + 1), period_freidx(i + 1)] = max(abs_y3(round((i - 0.5) * interval): min(round((i + 0.5) * interval), length(abs_y3))));    period_freidx(i + 1) = period_freidx(i + 1) + round((i - 0.5) * interval) - 1;endperiod_amp = period_amp / period_amp(2);period_fre = fs * period_freidx / L3;base = [110, 220, 440, 880]';power = linspace(0, 1 - 1/12, 12);rate = 2.^power;tunes = base * rate;song = [    tunes(3, 1), 1;    tunes(3, 1), 0.5;    tunes(3, 3), 0.5;    tunes(2, 8), 2;    tunes(2, 6), 1;    tunes(2, 6), 0.5;    tunes(2, 3), 0.5;    tunes(2, 8), 2;];beat = 0.5;melody = [];for i = 1: 1: length(song)    time = song(i, 2) * beat;    if i ~= 1        shiftTime = 0.08;        shiftLen = shiftTime * fs;        t = linspace(0, time + shiftTime, time * fs + shiftLen)';        sub_melody = sin(2 * pi * song(i, 1) .* t);        for j = 3: 1: round((length(period_amp) - 1) / 2)            sub_melody = sub_melody + period_amp(j) * sin(2 * pi * song(i, 1) * j .* t);        end        scale = Envelope(sub_melody);        sub_melody = sub_melody .* scale';        if max(sub_melody) ~= 0            sub_melody = sub_melody / max(sub_melody);        end        melLen = length(melody);        subLen = length(sub_melody);        melody = [            melody(1:melLen - shiftLen);             melody(melLen - shiftLen + 1: melLen) + sub_melody(1: shiftLen);            sub_melody(shiftLen + 1: subLen)         ];    else        t = linspace(0, time , time * fs)';        sub_melody = sin(2 * pi * song(i, 1) .* t);        for j = 3: 1: round((length(period_amp) - 1) / 2)            sub_melody = sub_melody + period_amp(j) * sin(2 * pi * song(i, 1) * j .* t);        end        scale = Envelope(sub_melody);        sub_melody = sub_melody .* scale';        if max(sub_melody) ~= 0            sub_melody = sub_melody / max(sub_melody);        end        melody = [melody; sub_melody];    end        endplot([0 : length(melody) - 1] / fs, melody);sound(melody, fs);audiowrite('hw_1_2_3_10.wav', melody, fs);